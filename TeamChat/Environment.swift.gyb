//
//  Environment.swift
//
//  PubNub Real-time Cloud-Hosted Push API and Push Notification Client Frameworks
//  Copyright Â© 2020 PubNub Inc.
//  https://www.pubnub.com/
//  https://www.pubnub.com/terms
//
//  Permission is hereby granted, free of charge, to any person obtaining a copy
//  of this software and associated documentation files (the "Software"), to deal
//  in the Software without restriction, including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
//
%{
import os

def chunks(seq, size):
  return (seq[i:(i + size)] for i in range(0, len(seq), size))

def encode(string, cipher):
  bytes = string.encode("UTF-8")
  return [ord(bytes[i]) ^ cipher[i % len(cipher)] for i in range(0, len(bytes))]
}%

import Foundation

enum ENV {
  private static let salt: [UInt8] = [
  %{ salt = [ord(byte) for byte in os.urandom(64)] }%
  % for chunk in chunks(salt, 8):
    ${"".join(["0x%02x, " % byte for byte in chunk])}
  % end
  ]

  static func decode(_ encoded: [UInt8], cipher: [UInt8]) -> String {
    String(decoding: encoded.enumerated().map { offset, element in
      element ^ cipher[offset % cipher.count]
    }, as: UTF8.self)
  }

  enum PubNub {
    /// Subscribe key that maps to the `TEAM_CHAT_SUB_KEY` environment variable
    static var subscribeKey: String {
      let encoded: [UInt8] = [
      % for chunk in chunks(encode(os.environ.get('TEAM_CHAT_SUB_KEY'), salt), 8):
        ${"".join(["0x%02x, " % byte for byte in chunk])}
      % end
      ]
      return decode(encoded, cipher: salt)
    }

    /// PubNub publish key that maps to the `TEAM_CHAT_PUB_KEY` environment variable
    static var publishKey: String {
      let encoded: [UInt8] = [
      % for chunk in chunks(encode(os.environ.get('TEAM_CHAT_PUB_KEY'), salt), 8):
        ${"".join(["0x%02x, " % byte for byte in chunk])}
      % end
      ]
      return decode(encoded, cipher: salt)
    }
  }
}
